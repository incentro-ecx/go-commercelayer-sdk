/*
Commerce Layer API

Testing StockItemsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package api

import (
	"context"
	openapiclient "github.com/incentro-dc/go-commercelayer-sdk/api"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_api_StockItemsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test StockItemsApiService DELETEStockItemsStockItemId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockItemId interface{}

		httpRes, err := apiClient.StockItemsApi.DELETEStockItemsStockItemId(context.Background(), stockItemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StockItemsApiService GETReservedStockIdStockItem", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var reservedStockId interface{}

		httpRes, err := apiClient.StockItemsApi.GETReservedStockIdStockItem(context.Background(), reservedStockId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StockItemsApiService GETSkuIdStockItems", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skuId interface{}

		httpRes, err := apiClient.StockItemsApi.GETSkuIdStockItems(context.Background(), skuId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StockItemsApiService GETStockItems", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.StockItemsApi.GETStockItems(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StockItemsApiService GETStockItemsStockItemId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockItemId interface{}

		resp, httpRes, err := apiClient.StockItemsApi.GETStockItemsStockItemId(context.Background(), stockItemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StockItemsApiService GETStockLineItemIdStockItem", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockLineItemId interface{}

		httpRes, err := apiClient.StockItemsApi.GETStockLineItemIdStockItem(context.Background(), stockLineItemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StockItemsApiService GETStockLocationIdStockItems", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockLocationId interface{}

		httpRes, err := apiClient.StockItemsApi.GETStockLocationIdStockItems(context.Background(), stockLocationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StockItemsApiService GETStockReservationIdStockItem", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockReservationId interface{}

		httpRes, err := apiClient.StockItemsApi.GETStockReservationIdStockItem(context.Background(), stockReservationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StockItemsApiService PATCHStockItemsStockItemId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockItemId interface{}

		resp, httpRes, err := apiClient.StockItemsApi.PATCHStockItemsStockItemId(context.Background(), stockItemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StockItemsApiService POSTStockItems", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.StockItemsApi.POSTStockItems(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
