/*
Commerce Layer API

Testing ReturnLineItemsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package api

import (
	"context"
	openapiclient "github.com/incentro-dc/go-commercelayer-sdk/api"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_api_ReturnLineItemsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ReturnLineItemsApiService DELETEReturnLineItemsReturnLineItemId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var returnLineItemId interface{}

		httpRes, err := apiClient.ReturnLineItemsApi.DELETEReturnLineItemsReturnLineItemId(context.Background(), returnLineItemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReturnLineItemsApiService GETLineItemIdReturnLineItems", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var lineItemId interface{}

		httpRes, err := apiClient.ReturnLineItemsApi.GETLineItemIdReturnLineItems(context.Background(), lineItemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReturnLineItemsApiService GETReturnIdReturnLineItems", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var returnId interface{}

		httpRes, err := apiClient.ReturnLineItemsApi.GETReturnIdReturnLineItems(context.Background(), returnId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReturnLineItemsApiService GETReturnLineItems", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ReturnLineItemsApi.GETReturnLineItems(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReturnLineItemsApiService GETReturnLineItemsReturnLineItemId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var returnLineItemId interface{}

		resp, httpRes, err := apiClient.ReturnLineItemsApi.GETReturnLineItemsReturnLineItemId(context.Background(), returnLineItemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReturnLineItemsApiService PATCHReturnLineItemsReturnLineItemId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var returnLineItemId interface{}

		resp, httpRes, err := apiClient.ReturnLineItemsApi.PATCHReturnLineItemsReturnLineItemId(context.Background(), returnLineItemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReturnLineItemsApiService POSTReturnLineItems", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.ReturnLineItemsApi.POSTReturnLineItems(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
