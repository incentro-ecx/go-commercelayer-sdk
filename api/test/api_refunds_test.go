/*
Commerce Layer API

Testing RefundsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package api

import (
	"context"
	openapiclient "github.com/incentro-dc/go-commercelayer-sdk/api"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_api_RefundsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RefundsApiService GETCaptureIdRefunds", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var captureId interface{}

		httpRes, err := apiClient.RefundsApi.GETCaptureIdRefunds(context.Background(), captureId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RefundsApiService GETOrderIdRefunds", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderId interface{}

		httpRes, err := apiClient.RefundsApi.GETOrderIdRefunds(context.Background(), orderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RefundsApiService GETRefunds", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.RefundsApi.GETRefunds(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RefundsApiService GETRefundsRefundId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var refundId interface{}

		resp, httpRes, err := apiClient.RefundsApi.GETRefundsRefundId(context.Background(), refundId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RefundsApiService GETReturnIdReferenceRefund", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var returnId interface{}

		httpRes, err := apiClient.RefundsApi.GETReturnIdReferenceRefund(context.Background(), returnId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RefundsApiService PATCHRefundsRefundId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var refundId interface{}

		resp, httpRes, err := apiClient.RefundsApi.PATCHRefundsRefundId(context.Background(), refundId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
