/*
Commerce Layer API

Testing InventoryStockLocationsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package api

import (
	"context"
	openapiclient "github.com/incentro-dc/go-commercelayer-sdk/api"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_api_InventoryStockLocationsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test InventoryStockLocationsApiService DELETEInventoryStockLocationsInventoryStockLocationId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var inventoryStockLocationId interface{}

		httpRes, err := apiClient.InventoryStockLocationsApi.DELETEInventoryStockLocationsInventoryStockLocationId(context.Background(), inventoryStockLocationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InventoryStockLocationsApiService GETInventoryModelIdInventoryStockLocations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var inventoryModelId interface{}

		httpRes, err := apiClient.InventoryStockLocationsApi.GETInventoryModelIdInventoryStockLocations(context.Background(), inventoryModelId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InventoryStockLocationsApiService GETInventoryStockLocations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.InventoryStockLocationsApi.GETInventoryStockLocations(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InventoryStockLocationsApiService GETInventoryStockLocationsInventoryStockLocationId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var inventoryStockLocationId interface{}

		resp, httpRes, err := apiClient.InventoryStockLocationsApi.GETInventoryStockLocationsInventoryStockLocationId(context.Background(), inventoryStockLocationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InventoryStockLocationsApiService GETShipmentIdInventoryStockLocation", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shipmentId interface{}

		httpRes, err := apiClient.InventoryStockLocationsApi.GETShipmentIdInventoryStockLocation(context.Background(), shipmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InventoryStockLocationsApiService GETStockLocationIdInventoryStockLocations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockLocationId interface{}

		httpRes, err := apiClient.InventoryStockLocationsApi.GETStockLocationIdInventoryStockLocations(context.Background(), stockLocationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InventoryStockLocationsApiService PATCHInventoryStockLocationsInventoryStockLocationId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var inventoryStockLocationId interface{}

		resp, httpRes, err := apiClient.InventoryStockLocationsApi.PATCHInventoryStockLocationsInventoryStockLocationId(context.Background(), inventoryStockLocationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test InventoryStockLocationsApiService POSTInventoryStockLocations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.InventoryStockLocationsApi.POSTInventoryStockLocations(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
