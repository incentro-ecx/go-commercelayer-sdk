/*
Commerce Layer API

Testing SkusApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package api

import (
	"context"
	openapiclient "github.com/incentro-dc/go-commercelayer-sdk/api"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_api_SkusApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SkusApiService DELETESkusSkuId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skuId interface{}

		httpRes, err := apiClient.SkusApi.DELETESkusSkuId(context.Background(), skuId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SkusApiService GETBundleIdSkus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var bundleId interface{}

		httpRes, err := apiClient.SkusApi.GETBundleIdSkus(context.Background(), bundleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SkusApiService GETBuyXPayYPromotionIdSkus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var buyXPayYPromotionId interface{}

		httpRes, err := apiClient.SkusApi.GETBuyXPayYPromotionIdSkus(context.Background(), buyXPayYPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SkusApiService GETExternalPromotionIdSkus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var externalPromotionId interface{}

		httpRes, err := apiClient.SkusApi.GETExternalPromotionIdSkus(context.Background(), externalPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SkusApiService GETFixedAmountPromotionIdSkus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fixedAmountPromotionId interface{}

		httpRes, err := apiClient.SkusApi.GETFixedAmountPromotionIdSkus(context.Background(), fixedAmountPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SkusApiService GETFixedPricePromotionIdSkus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var fixedPricePromotionId interface{}

		httpRes, err := apiClient.SkusApi.GETFixedPricePromotionIdSkus(context.Background(), fixedPricePromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SkusApiService GETFreeGiftPromotionIdSkus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var freeGiftPromotionId interface{}

		httpRes, err := apiClient.SkusApi.GETFreeGiftPromotionIdSkus(context.Background(), freeGiftPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SkusApiService GETInStockSubscriptionIdSku", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var inStockSubscriptionId interface{}

		httpRes, err := apiClient.SkusApi.GETInStockSubscriptionIdSku(context.Background(), inStockSubscriptionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SkusApiService GETOrderIdAvailableFreeSkus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderId interface{}

		httpRes, err := apiClient.SkusApi.GETOrderIdAvailableFreeSkus(context.Background(), orderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SkusApiService GETPercentageDiscountPromotionIdSkus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var percentageDiscountPromotionId interface{}

		httpRes, err := apiClient.SkusApi.GETPercentageDiscountPromotionIdSkus(context.Background(), percentageDiscountPromotionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SkusApiService GETPriceIdSku", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var priceId interface{}

		httpRes, err := apiClient.SkusApi.GETPriceIdSku(context.Background(), priceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SkusApiService GETReservedStockIdSku", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var reservedStockId interface{}

		httpRes, err := apiClient.SkusApi.GETReservedStockIdSku(context.Background(), reservedStockId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SkusApiService GETShippingCategoryIdSkus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shippingCategoryId interface{}

		httpRes, err := apiClient.SkusApi.GETShippingCategoryIdSkus(context.Background(), shippingCategoryId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SkusApiService GETSkuListIdSkus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skuListId interface{}

		httpRes, err := apiClient.SkusApi.GETSkuListIdSkus(context.Background(), skuListId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SkusApiService GETSkuListItemIdSku", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skuListItemId interface{}

		httpRes, err := apiClient.SkusApi.GETSkuListItemIdSku(context.Background(), skuListItemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SkusApiService GETSkuListPromotionRuleIdSkus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skuListPromotionRuleId interface{}

		httpRes, err := apiClient.SkusApi.GETSkuListPromotionRuleIdSkus(context.Background(), skuListPromotionRuleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SkusApiService GETSkus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SkusApi.GETSkus(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SkusApiService GETSkusSkuId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skuId interface{}

		resp, httpRes, err := apiClient.SkusApi.GETSkusSkuId(context.Background(), skuId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SkusApiService GETStockItemIdSku", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockItemId interface{}

		httpRes, err := apiClient.SkusApi.GETStockItemIdSku(context.Background(), stockItemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SkusApiService GETStockLineItemIdSku", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockLineItemId interface{}

		httpRes, err := apiClient.SkusApi.GETStockLineItemIdSku(context.Background(), stockLineItemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SkusApiService GETStockReservationIdSku", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockReservationId interface{}

		httpRes, err := apiClient.SkusApi.GETStockReservationIdSku(context.Background(), stockReservationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SkusApiService GETStockTransferIdSku", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockTransferId interface{}

		httpRes, err := apiClient.SkusApi.GETStockTransferIdSku(context.Background(), stockTransferId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SkusApiService GETTaxCategoryIdSku", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var taxCategoryId interface{}

		httpRes, err := apiClient.SkusApi.GETTaxCategoryIdSku(context.Background(), taxCategoryId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SkusApiService PATCHSkusSkuId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var skuId interface{}

		resp, httpRes, err := apiClient.SkusApi.PATCHSkusSkuId(context.Background(), skuId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SkusApiService POSTSkus", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.SkusApi.POSTSkus(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
