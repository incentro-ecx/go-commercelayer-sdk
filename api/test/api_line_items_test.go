/*
Commerce Layer API

Testing LineItemsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package api

import (
	"context"
	openapiclient "github.com/incentro-dc/go-commercelayer-sdk/api"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_api_LineItemsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test LineItemsApiService DELETELineItemsLineItemId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var lineItemId interface{}

		httpRes, err := apiClient.LineItemsApi.DELETELineItemsLineItemId(context.Background(), lineItemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LineItemsApiService GETLineItemOptionIdLineItem", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var lineItemOptionId interface{}

		httpRes, err := apiClient.LineItemsApi.GETLineItemOptionIdLineItem(context.Background(), lineItemOptionId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LineItemsApiService GETLineItems", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.LineItemsApi.GETLineItems(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LineItemsApiService GETLineItemsLineItemId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var lineItemId interface{}

		resp, httpRes, err := apiClient.LineItemsApi.GETLineItemsLineItemId(context.Background(), lineItemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LineItemsApiService GETOrderIdLineItems", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderId interface{}

		httpRes, err := apiClient.LineItemsApi.GETOrderIdLineItems(context.Background(), orderId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LineItemsApiService GETOrderSubscriptionItemIdSourceLineItem", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var orderSubscriptionItemId interface{}

		httpRes, err := apiClient.LineItemsApi.GETOrderSubscriptionItemIdSourceLineItem(context.Background(), orderSubscriptionItemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LineItemsApiService GETReturnLineItemIdLineItem", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var returnLineItemId interface{}

		httpRes, err := apiClient.LineItemsApi.GETReturnLineItemIdLineItem(context.Background(), returnLineItemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LineItemsApiService GETShipmentIdLineItems", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shipmentId interface{}

		httpRes, err := apiClient.LineItemsApi.GETShipmentIdLineItems(context.Background(), shipmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LineItemsApiService GETStockLineItemIdLineItem", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockLineItemId interface{}

		httpRes, err := apiClient.LineItemsApi.GETStockLineItemIdLineItem(context.Background(), stockLineItemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LineItemsApiService GETStockReservationIdLineItem", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockReservationId interface{}

		httpRes, err := apiClient.LineItemsApi.GETStockReservationIdLineItem(context.Background(), stockReservationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LineItemsApiService GETStockTransferIdLineItem", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stockTransferId interface{}

		httpRes, err := apiClient.LineItemsApi.GETStockTransferIdLineItem(context.Background(), stockTransferId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LineItemsApiService PATCHLineItemsLineItemId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var lineItemId interface{}

		resp, httpRes, err := apiClient.LineItemsApi.PATCHLineItemsLineItemId(context.Background(), lineItemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test LineItemsApiService POSTLineItems", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.LineItemsApi.POSTLineItems(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
